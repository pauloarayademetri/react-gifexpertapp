{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGriditem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGriditem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAU,cAA9C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OAEI,uBAAMC,SAbW,SAAEC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAOlB,cAEI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAvBc,SAAEP,GAExBF,EAAcE,EAAEQ,OAAOF,UAgBvB,Q,+BCxBKG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0FAE6EC,UAAWH,GAFxF,sBAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAIFC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZvB,kBAoBZM,GApBY,4CAAH,sDCAPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAItC,OACI,sBAAKc,UAAU,yCAAf,cACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCLCO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAEvB,ECAwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAfAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GACHC,YAAY,WAERJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAGZ,CAACpB,IAEGqB,EDtBmBM,CAAc3B,GAAhCO,EAAR,EAAQA,KAAMa,EAAd,EAAcA,QAEd,OACI,qCACA,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEEoB,GAAW,wCAGb,qBAAKJ,UAAU,YAAf,SAEQT,EAAKE,KAAK,SAAAC,GAAG,OACT,cAAC,EAAD,eAESA,GADCA,EAAIC,aEZrBiB,EAAe,WAKxB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KASA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MC1BlC8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1f90f134.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState( 'Hola Mundo' ); // también podeos dejar ''\r\n\r\n    const handleInputChange = ( e ) => {\r\n        // console.log(e.target.value);\r\n        setInputValue(e.target.value); // e.target.value: dispara un evento cuyo objetivo(target) es cambiar el valor inicial -> no olvidar que esta función está vinculada al atributo del <input/>, específicamente \"onChange\"\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault(); // vinculado a la propiedad del \"form\" mediante handleSubmit\r\n        \r\n        if (inputValue.trim().length > 2){\r\n            \r\n            setCategories( cats => [inputValue, ...cats ] ); // para agregar catergoria a la lista mediante formulario -> usar setCategories\r\n            setInputValue('');\r\n        } // if de validación: para evitar categorías vacias y 2 o más elementos con el mismo Key (o nombre)\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <form onSubmit={ handleSubmit }> {/* e.preventDefault(): Para prevenir el comportamiento por defecto asociado a la renderización completa del formulario en el navegador*/}\r\n\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            /> {/* input: genera una caja para poder escribir */}\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n} // recordar que setCategoría es una función del useState","\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=KZrEGXCNHhb6rzmGO2bCQGUDHRxYZwdx&q=${ encodeURI( category ) }&limit=10`; // encodeURI( ): para enviar la categoría a la API (carga inicial en POSTMAN)\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    // para traer la data mediante la Api, en formato json \r\n    // desestructuramos { data } para ir directo a la data, que es lo que necesitamos\r\n\r\n    const gifs = data.map( img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n\r\n        } // retornarmos el objeto que necesitamos \r\n    }) //el arreglo tiene mucha información, por ello extraemos solo la información que necesitamos\r\n\r\n    // console.log(gifs);\r\n    // setImages( gifs ); // mi nuevo estado van a ser los gifs que estamos recibiendo con la Api // nota: esta función se utilizó cuando teníamos este código dentro del componente GifGrid.js\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGriditem = ( { id, title, url } ) => {\r\n\r\n    // console.log( id, title, url );\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\"> {/* Efecto de animación */}\r\n            <img src={ url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    ) // className: en lenguaje JS\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGriditem } from './GifGriditem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    const { data, loading } = useFetchGifs( category ); // custom hooks (con el objeto {} del estado desestructurado - recuperando solo el \"loading\")\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n\r\n        { loading && <p>Loading</p> } \r\n        {/* { loading ? 'Cargando...' : 'Data cargada' } */}\r\n        \r\n        <div className=\"card-grid\">\r\n            {\r\n                data.map( img => (\r\n                    <GifGriditem \r\n                        key={ img.id }\r\n                        { ...img }\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","// Custom Hooks: son funciones creadas -> Ej export const useFetchGifts = () => {}\r\n// Los Hooks pueden tener un estado (useState)\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    \r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs =>{\r\n                setTimeout( () =>{\r\n                    // console.log(imgs); // para imprimir las imagenes del getGifs (arreglo de objetos)\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                }, 3000 );\r\n            })\r\n    \r\n    }, [category])\r\n\r\n    return state; // { data: [], loading: true };\r\n    \r\n}\r\n\r\n\r\n// En prueba inicial (sin considerar los getGifs)\r\n\r\n// setTimeout( () => {\r\n//     setstate({\r\n//         data: [1,2,3,4,5,6,7],\r\n//         loading: false\r\n//     });\r\n// }, 3000 );","//Tarea: Crear un Componente \"GifExpertApp\"\r\n// GifExpertApp: Componente base que crea listas\r\n\r\nimport React, { useState } from 'react'; // se puede usar snippets \"rafc+Enter\" \r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball']; \r\n    // no nos sirve si queremos incluir nuevos elementos en el arreglo y renderizar. Por lo anterior debemos usar UseState\r\n    \r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    // const [categories, setCategories] = useState(['One Punch', 'Samurai X', 'Dragon Ball'])\r\n\r\n    // const handleAdd = () => {\r\n        // Para agregar elementos a la lista de categorías (arreglo)...\r\n        // setCategories( [...categories, 'HunterXHunter'] ); // 1era solución\r\n        // setCategories( cats => [...cats, 'HunterXHunter' ] ); // 2da solución\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            {/* <button onClick={ handleAdd } >Agregar</button> */}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category }\r\n                        />\r\n                    ))\r\n                }\r\n                {/* {\r\n                    categories.map( (category) => {\r\n                        return <li key={ category }> { category } </li>\r\n                    }) // map(): método (que se usan en los arreglos) para barrer y retornar los elementos de los arreglos. La función considera 2 argumentos por defectos: elementos del arreglo + idx (key o i -> id único de la base de datos, no del indice visible).\r\n                } */}\r\n            </ol>\r\n\r\n        </>\r\n    );\r\n    \r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n\n// Tarea: Crear un componente\n// GifExpertApp\n// <h2>GifExpertApp</h2>\n// <hr />"],"sourceRoot":""}